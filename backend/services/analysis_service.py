import os
import json
import io
from loguru import logger

# –ú–æ–¥–µ–ª–∏ Pydantic –∏ –∫–æ–Ω—Ñ–∏–≥
from backend.api.models import PreparationAnalysis, ResultsAnalysis, ScoreBreakdown
from ..core.config import settings

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
from backend.agents.pipeline_1_pre_interview.agent_1_data_parser import agent_1_data_parser
from backend.agents.pipeline_1_pre_interview.agent_2_profiler import agent_2_profiler
from backend.agents.pipeline_1_pre_interview.agent_3_plan_generator import agent_3_plan_generator

# –£—Ç–∏–ª–∏—Ç—ã
from pypdf import PdfReader
import docx
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.genai import types


class AnalysisService:
    """Service responsible for interview analysis business logic using AI Agents"""

    async def analyze_preparation(self, profile: str, cv_file: io.BytesIO, filename: str) -> PreparationAnalysis:
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é...")

        api_key_to_use = settings.google_api_key
        if not api_key_to_use:
            logger.error("Google API key –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")
            raise ValueError("Google API key is not provided.")

        # --- ‚≠êÔ∏è –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
        os.environ['GOOGLE_API_KEY'] = api_key_to_use
        logger.success("API –∫–ª—é—á Google —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

        # --- –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ ---
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: {filename}")
        cv_text = ""
        try:
            if filename.lower().endswith('.pdf'):
                reader = PdfReader(cv_file)
                cv_text = "\n".join(page.extract_text() or "" for page in reader.pages)
                logger.success("–¢–µ–∫—Å—Ç –∏–∑ PDF —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω.")
            elif filename.lower().endswith('.docx'):
                doc = docx.Document(cv_file)
                lines = [para.text.strip() for para in doc.paragraphs if para.text.strip()]
                cv_text = "\n".join(lines)
                logger.success("–¢–µ–∫—Å—Ç –∏–∑ DOCX —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏ –æ—á–∏—â–µ–Ω.")
            else:
                cv_text = cv_file.read().decode('utf-8', errors='ignore')
                logger.success("–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
            raise ValueError(f"Could not process file: {filename}")

        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {cv_text[:200]}...")

        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ ---
        session_service = InMemorySessionService()
        session_id = "preparation_session_123"
        user_id = "prep_user"
        await session_service.create_session(app_name=settings.app_name, user_id=user_id, session_id=session_id)

        # --- –ó–∞–ø—É—Å–∫ –ê–≥–µ–Ω—Ç–∞ 1 ---
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ agent_1_data_parser...")
        runner_1 = Runner(agent=agent_1_data_parser, app_name=settings.app_name, session_service=session_service)
        message_for_agent_1 = types.Content(role="user", parts=[types.Part(text=cv_text), types.Part(
            text=f"### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∞–∫–∞–Ω—Å–∏–∏\n{profile}")])
        agent_1_output = ""
        async for event in runner_1.run_async(session_id=session_id, user_id=user_id,
                                              new_message=message_for_agent_1):  # –ö–ª—é—á –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∑–¥–µ—Å—å
            if event.content and event.content.parts:
                agent_1_output += "".join(part.text for part in event.content.parts if part.text)

        logger.success("‚úÖ agent_1_data_parser –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
        logger.debug(f"–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ê–≥–µ–Ω—Ç–∞ 1 (JSON):\n{agent_1_output}")

        # --- –ó–∞–ø—É—Å–∫ –ê–≥–µ–Ω—Ç–∞ 2 ---
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ agent_2_profiler...")
        runner_2 = Runner(agent=agent_2_profiler, app_name=settings.app_name, session_service=session_service)
        message_for_agent_2 = types.Content(role="user", parts=[types.Part(text=agent_1_output)])
        agent_2_output = ""
        async for event in runner_2.run_async(session_id=session_id, user_id=user_id, new_message=message_for_agent_2):
            if event.content and event.content.parts:
                agent_2_output += "".join(part.text for part in event.content.parts if part.text)

        logger.success("‚úÖ agent_2_profiler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
        logger.debug(f"–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ê–≥–µ–Ω—Ç–∞ 2 (–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å):\n{agent_2_output}")

        # --- –ó–∞–ø—É—Å–∫ –ê–≥–µ–Ω—Ç–∞ 3 ---
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ agent_3_plan_generator...")
        runner_3 = Runner(agent=agent_3_plan_generator, app_name=settings.app_name, session_service=session_service)
        message_for_agent_3 = types.Content(role="user", parts=[types.Part(text=agent_2_output)])
        final_output = ""
        async for event in runner_3.run_async(session_id=session_id, user_id=user_id, new_message=message_for_agent_3):
            if event.content and event.content.parts:
                final_output += "".join(part.text for part in event.content.parts if part.text)

        logger.success("‚úÖ agent_3_plan_generator –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
        logger.debug(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ê–≥–µ–Ω—Ç–∞ 3:\n{final_output}")

        # --- –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
        logger.info("–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –æ–±—ä–µ–∫—Ç Pydantic...")
        try:
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ ```json ``` –æ–±–µ—Ä—Ç–∫–∏, –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –∏—Ö –≤–µ—Ä–Ω–µ—Ç
            clean_json_str = final_output.strip().replace("```json", "").replace("```", "").strip()
            data = json.loads(clean_json_str)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç
            data["message"] = "Interview preparation plan created successfully."

            result = PreparationAnalysis(**data)
            logger.success("–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            return result
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç –ê–≥–µ–Ω—Ç–∞ 3: {e}")
            logger.error(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {final_output}")
            raise ValueError("AI-—Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

    async def analyze_results(self, video_link: str, matrix_content: bytes) -> ResultsAnalysis:
        """
        Analyze interview results using the post-interview pipeline.
        """
        api_key_to_use = settings.google_api_key
        if not api_key_to_use:
            raise ValueError("Google API key is not provided.")

        # 2. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∏.
        # –ù–∞–ø—Ä–∏–º–µ—Ä:
        # pipeline = post_pipeline.create_post_interview_pipeline(api_key_to_use)
        # context = { 'video_link': video_link, 'matrix_content': matrix_content }
        # pipeline_result_text = await pipeline.run(context)

        # 3. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
        # –≤ –æ–±—ä–µ–∫—Ç ResultsAnalysis.

        return ResultsAnalysis(
            message="Interview analysis completed successfully",
            transcription="Transcribed text from video analysis.",
            scores=ScoreBreakdown(
                technical=90, communication=85, leadership=88, cultural=80, overall=85
            ),
            strengths=["...", "..."],
            concerns=["...", "..."],
            recommendation="RECOMMEND HIRE",
            reasoning="Reasoning for recommendation.",
            topicsDiscussed=["Topic 1", "Topic 2"]
        )
